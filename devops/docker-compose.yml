version: '3.7'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - webnet
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_PORT: "9092"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - webnet
  redis:
    image: redis:5.0.4
    ports:
      - "6379:6379"
    deploy:
      placement:
        constraints: [ node.role == manager ]
    networks:
      - webnet
  mongodb:
    image: mongo
    ports:
      - "27017:27017"
    networks:
      - webnet
  gateway:
    image: vishals9711/gateway
    ports:
      - "4000:4000"
    deploy:
      replicas: 1
    networks:
      - webnet
    environment:
      - FRONT_END_HOST_URL=http://frontend:3000
      - MESSANGER_HOST_URL=http://messanger:5000
      - AUTH_SERVICE_URL=http://authservice:5001
      - LISTING_SERVICE_URL=http://authservice:5002
      - IMAGE_SERVICE_URL=http://authservice:5003
      - WEBSOCKET_HOST=http://websocket:5500/websocket
  frontend:
    image: vishals9711/react-demo
    ports:
      - "3000:3000"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
    environment:
      - REACT_APP_WEBSOCKET_HOST=5500
  websocket:
    image: vishals9711/websocket-demo
    depends_on:
      - redis
    ports:
      - "5500:5500"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
    environment:
      - REDIS_HOST=redis
      - WEBSOCKET_HOST=http://websocket:5500/websocket
  messanger:
    image: vishals9711/messanger-demo
    depends_on:
      - redis
      - mongodb
    ports:
      - "5000:5000"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
    environment:
      - REDIS_HOST=redis
      - MONGO_HOST=mongodb://mongodb:27017
      - MONGOCLIENT_DB=centStoreDB
      - MESSAGES_COLLECTION=messagesCollection
      - MESSANGER_HOST=5000
  imageservice:
    image: vishals9711/imageservice-demo
    depends_on:
      - redis
      - mongodb
    ports:
      - "5003:5003"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
    environment:
      - REDIS_HOST=redis
      - MONGO_HOST=mongodb://mongodb:27017
  authservice:
    image: vishals9711/authservice-demo
    depends_on:
      - redis
      - mongodb
    ports:
      - "5001:5001"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
    environment:
      - REDIS_HOST=redis
      - MONGO_HOST=mongodb://mongodb:27017
      - MONGOCLIENT_DB=centStoreDB
      - USER_COLLECTION=userCollection
      - AUTH_SERVICE=5001
  jobworker:
    image: vishals9711/jobworker-demo
    depends_on:
      - redis
      - mongodb
    ports:
      - "5004:5004"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
    environment:
      - REDIS_HOST=redis
      - MONGO_HOST=mongodb://mongodb:27017
  listingservice:
    image: vishals9711/listingservice-demo
    depends_on:
      - redis
      - mongodb
    ports:
      - "5002:5002"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
    environment:
      - REDIS_HOST=redis
      - MONGO_HOST=mongodb://mongodb:27017
      - MONGOCLIENT_DB=centStoreDB
      - LISTING_COLLECTION=listingCollection
      - LISTING_SERVICE=5002
networks:
  webnet: null
